#!/usr/bin/env bash


################################################################################
### Head: Url
##

# * https://github.com/samwhelp/skel-project-plan/blob/gh-pages/demo/sh/standalone/bin/demo-ctrl

##
### Tail: Url
################################################################################


################################################################################
### Head: Init
##
set -e ## for Exit immediately if a command exits with a non-zero status.
THE_BASE_DIR_PATH="$(cd -- "$(dirname -- "$0")" ; pwd)"
THE_CMD_FILE_NAME=$(basename $0)
### Tail: Init
################################################################################


################################################################################
### Head: Util / Debug
##

util_debug_echo () {
	if is_debug; then
		echo "$@" 1>&2
	fi
}

util_error_echo () {
	echo "$@" 1>&2
}


##
### Head: Util / Debug
################################################################################


################################################################################
### Head: Base
##

find_dir_path () {
	if ! [ -d "$(dirname -- "$1")" ]; then
		dirname -- "$1"
		return 1
	fi
	echo "$(cd -- "$(dirname -- "$1")" ; pwd)"
}

##THIS_BASE_DIR_PATH="$(find_dir_path "$0")"

## $ export DEBUG_DEMO_CTRL=true
is_debug () {
	if [ "$DEBUG_DEMO_CTRL" = "true" ]; then
		return 0
	fi

	return 1
}

is_not_debug () {
	! is_debug
}

base_var_init () {

	THE_PLAN_DIR_PATH=$(find_dir_path "$THE_BASE_DIR_PATH/../.")


	THE_CMD_VERSION='0.1'

	THE_CMD_DIR_PATH="${THE_BASE_DIR_PATH}"

	if [ "none${THE_CMD_FILE_NAME}" = 'none' ]; then
		THE_CMD_FILE_NAME="demo-ctrl"
	fi

	THE_CMD_FILE_PATH="${THE_CMD_DIR_PATH}/${THE_CMD_FILE_NAME}"

	## https://github.com/samwhelp/skel-project-plan/blob/gh-pages/demo/sh/standalone/bin/demo-ctrl
	## https://raw.githubusercontent.com/samwhelp/skel-project-plan/gh-pages/demo/sh/standalone/bin/demo-ctrl
	THE_SELF_UPDATE_URL='https://samwhelp.github.io/skel-project-plan/demo/sh/standalone/bin/demo-ctrl'




	THE_BIN_DIR_NAME="bin"
	THE_BIN_DIR_PATH="$THE_PLAN_DIR_PATH/$THE_BIN_DIR_NAME"


	THE_VAR_DIR_NAME="var"
	THE_VAR_DIR_PATH="$THE_PLAN_DIR_PATH/$THE_VAR_DIR_NAME"


	THE_PROFILE_DIR_NAME=".${THE_CMD_FILE_NAME}-profile"
	THE_PROFILE_DIR_PATH="$HOME/$THE_PROFILE_DIR_NAME"

	THE_PROJECT_DIR_NAME="${THE_CMD_FILE_NAME}"
	THE_PROJECT_DIR_PATH="$HOME/.local/share/$THE_PROJECT_DIR_NAME"

	THE_CONFIG_DIR_NAME="${THE_CMD_FILE_NAME}"
	THE_CONFIG_DIR_PATH="$HOME/.config/$THE_CONFIG_DIR_NAME"

	THE_CACHE_DIR_NAME="${THE_CMD_FILE_NAME}"
	THE_CACHE_DIR_PATH="$HOME/.cache/$THE_CACHE_DIR_NAME"


}

base_var_dump () {

	is_not_debug && return 0

	util_debug_echo
	util_debug_echo "################################################################################"
	util_debug_echo "### Head: var_dump"
	util_debug_echo "##"
	util_debug_echo "#"


	util_debug_echo "THE_PLAN_DIR_PATH=$THE_PLAN_DIR_PATH"

	util_debug_echo "THE_CMD_FILE_NAME=$THE_CMD_FILE_NAME"
	util_debug_echo "THE_CMD_FILE_PATH=$THE_CMD_FILE_PATH"
	util_debug_echo "THE_CMD_DIR_PATH=$THE_CMD_DIR_PATH"

	util_debug_echo "THE_SELF_UPDATE_URL=$THE_SELF_UPDATE_URL"


	util_debug_echo "THE_BIN_DIR_NAME=$THE_BIN_DIR_NAME"
	util_debug_echo "THE_BIN_DIR_PATH=$THE_BIN_DIR_PATH"

	util_debug_echo "THE_VAR_DIR_NAME=$THE_VAR_DIR_NAME"
	util_debug_echo "THE_VAR_DIR_PATH=$THE_VAR_DIR_PATH"


	util_debug_echo "THE_PROFILE_DIR_NAME=$THE_PROFILE_DIR_NAME"
	util_debug_echo "THE_PROFILE_DIR_PATH=$THE_PROFILE_DIR_PATH"

	util_debug_echo "THE_PROJECT_DIR_NAME=$THE_PROJECT_DIR_NAME"
	util_debug_echo "THE_PROJECT_DIR_PATH=$THE_PROJECT_DIR_PATH"

	util_debug_echo "THE_CONFIG_DIR_NAME=$THE_CONFIG_DIR_NAME"
	util_debug_echo "THE_CONFIG_DIR_PATH=$THE_CONFIG_DIR_PATH"

	util_debug_echo "THE_CACHE_DIR_NAME=$THE_CACHE_DIR_NAME"
	util_debug_echo "THE_CACHE_DIR_PATH=$THE_CACHE_DIR_PATH"


	util_debug_echo "#"
	util_debug_echo "##"
	util_debug_echo "### Tail: var_dump"
	util_debug_echo "################################################################################"
	util_debug_echo
}


base_var_init

base_var_dump

##
### Tail: Base
################################################################################


################################################################################
### Head: Util / Command
##

is_function_exist () {
	if type -p "$1" > /dev/null; then
		return 0
	else
		return 1
	fi
}

# is_command_exist () {
# 	if command -v "$1" > /dev/null; then
# 		return 0
# 	else
# 		return 1
# 	fi
# }

is_command_exist () {
	if [ -x "$(command -v $1)" ]; then
		return 0
	else
		return 1
	fi
}

##
### Tail: Util / Command
################################################################################


################################################################################
### Head: Util / Process
##

util_stop_all ()  {

	if is_command_exist 'pkill'; then
		util_stop_all_by_pkill "$1"
		return 0
	fi

	if is_command_exist 'killall'; then
		util_stop_all_by_killall "$1"
		return 0
	fi

	return 0
}

util_stop_all_by_pkill () {

	if pkill "$1"; then
		return 0
	fi

	return 0
}

util_stop_all_by_killall () {

	if killall -q -9 "$1"; then
		return 0
	fi

	return 0

}

##
### Tail: Util / Process
################################################################################


################################################################################
### Head: Util / SubCmd
##

sub_cmd_find_function_name () {
	echo "sub_run_$1"
}

##
### Tail: Util / SubCmd
################################################################################


################################################################################
### Head: Util / SelfUpdate
##

util_make_tmp_dir () {
	THE_TMP_DIR_PATH="/tmp/tmp.$$.$RANDOM"
	mkdir "$THE_TMP_DIR_PATH"
}


util_self_update () {

	util_make_tmp_dir
	local tmp_file_path="${THE_TMP_DIR_PATH}/${THE_CMD_FILE_NAME}"
	wget -c "$THE_SELF_UPDATE_URL" -O "$tmp_file_path"

	echo "install -m 755 $tmp_file_path $THE_CMD_FILE_PATH"
	install -m 755 "$tmp_file_path" "$THE_CMD_FILE_PATH"

	echo
	echo "Current Version:"

	"$THE_CMD_FILE_PATH" version

}


main_version () {
	echo $THE_CMD_VERSION
}

util_self_actions () {
	grep '^sub_run' "${THE_CMD_FILE_PATH}" | cut -d ' ' -f 1 | awk -F 'sub_run_' '{print $2}' | sort -u
}

##
### Tail: Util / SelfUpdate
################################################################################


################################################################################
### Head: Model
##

demo_list () {
	echo "demo_list"
	echo "$@"
	echo $@
}


demo_run_test_pass () {

	## $ ./demo-ctrl test '1   2' ' 3' "  4"

	echo
	echo '================================================================================'
	echo

	echo '	demo_run_test_pass'

	echo
	echo '================================================================================'
	echo

	echo "$1"
	echo "$2"
	echo "$3"

	echo
	echo '================================================================================'
	echo

	echo $1
	echo $2
	echo $3

	echo
	echo '================================================================================'
	echo

}


##
### Tail: Model
################################################################################


################################################################################
### Head: SubCmd
##

sub_run_help () {
	main_usage "$@"
}

sub_run_version () {
	main_version
}

sub_run_self_update () {
	util_self_update
}

sub_run_self_actions () {
	util_self_actions
}




sub_run_list () {
	echo "sub_run_list"
	demo_list "$@"
}

sub_run_get () {
	echo "sub_run_get"
}

sub_run_set () {
	echo "sub_run_set"
	echo "$@"
	echo $@
}

sub_run_reset () {
	echo "sub_run_reset"
}




sub_run_test_pass () {
	## $ ./demo-ctrl test_pass '1   2' ' 3' "  4"
	demo_run_test_pass "$@"
}

sub_run_test () {

	## $ ./demo-ctrl test '1   2' ' 3' "  4"


	echo
	echo '================================================================================'
	echo

	echo '	sub_run_test'

	echo
	echo '================================================================================'
	echo

	echo "$1"
	echo "$2"
	echo "$3"

	echo
	echo '================================================================================'
	echo

	echo $1
	echo $2
	echo $3

	echo
	echo '================================================================================'
	echo

}


##
### Tail: SubCmd
################################################################################


################################################################################
### Head: Main
##

main_usage () {
	##local cmd_name="$0"
	local cmd_name="${THE_CMD_FILE_NAME}"

cat << EOF

Usage:

	## synopsis

		$ $cmd_name [action]

Example:

	## help

		$ $cmd_name
		$ $cmd_name help

	## version

		$ $cmd_name version

	## self_update

		$ $cmd_name self_update

	## self_actions

		$ $cmd_name self_actions

	## model

		$ $cmd_name list
		$ $cmd_name get
		$ $cmd_name set some_value
		$ $cmd_name reset

	## test_args

		$ $cmd_name test '1   2' ' 3' "  4"
		$ $cmd_name test_pass '1   2' ' 3' "  4"

Debug:

	## on

		$ export DEBUG_DEMO_CTRL=true

	## off

		$ export DEBUG_DEMO_CTRL=false

EOF

}

main_check_args_size () {
	if [ $1 -le 0 ]; then
		shift
		main_run_default_sub_cmd "$@"
		exit 1
	fi
}

main_run_default_sub_cmd () {
	main_usage "$@"
}

main_run_sub_cmd () {

	local sub_cmd="$1"

	shift

	local function_name=$(sub_cmd_find_function_name "$sub_cmd")

	## if ! command -v $function_name > /dev/null; then
	if ! type -p $function_name > /dev/null; then
		util_debug_echo "[Debug] sub_cmd_function_not_exist: sub_cmd=$sub_cmd; function_name=$function_name"

		echo
		main_run_default_sub_cmd "$@"
		return 1
	fi

	"$function_name" "$@" ## run sub cmd function


}

## Start
main_check_args_size $# "$@"

main_run_sub_cmd "$@"

##
### Tail: Main
################################################################################
